services: # 여러 서비스(컨테이너)를 정의하는 섹션
  web: # 서비스 이름
    image: ${NGINX_IMAGE} # 사용할 Docker 이미지
    build: # Dockerfile을 사용하여 이미지를 빌드할 때 사용
      context: ./nginx # Dockerfile의 경로
    ports:
      - "8000:80" # 호스트와 컨테이너의 포트를 매핑
    volumes:
      - ./.bashrc:/root/.bashrc
      - ./nginx/conf.d:/etc/nginx/conf.d # 호스트와 컨테이너의 디렉토리를 매핑
      - ./code:/home/code
    # environment:
    #   - ENV_VAR=value # 환경 변수 설정
    # command: ["nginx -g"] # 컨테이너가 시작될 때 실행할 명령
    # depends_on:
    #   - another_service_name # 다른 서비스가 먼저 시작되도록 설정

  php: # 서비스 이름
    image: ${PHP_IMAGE} # php-fpm 이미지 사용
    volumes:
      - ./.bashrc:/root/.bashrc
      - ./php/php-fpm.conf:/opt/bitnami/php/etc/php-fpm.d/www.conf # php-fpm 설정 파일을 매핑
      - ./php/php.ini:/opt/bitnami/php/etc/php.ini # php.ini 파일을 매핑
      - ./code:/home/code # 소스코드 위치를 매핑

  mysql: # 서비스 이름
    image: ${MYSQL_IMAGE} # 사용할 Docker 이미지
    volumes:
      - ./.bashrc:/root/.bashrc
      - ./mysql/data:/var/lib/mysql # 호스트와 컨테이너의 디렉토리를 매핑
      - ./mysql/initdb:/docker-entrypoint-initdb.d
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # 환경 변수 설정

networks: # 사용자 정의 네트워크
  web_network:
    driver: bridge
